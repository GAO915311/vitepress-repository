import{_ as o,c as a,o as s,j as e,a as t}from"./chunks/framework.C7q64-zR.js";const $=JSON.parse('{"title":"KMP 算法","description":"","frontmatter":{},"headers":[],"relativePath":"LeetCode/字符串.md","filePath":"LeetCode/字符串.md"}'),n={name:"LeetCode/字符串.md"},_=e("h1",{id:"kmp-算法",tabindex:"-1"},[t("KMP 算法 "),e("a",{class:"header-anchor",href:"#kmp-算法","aria-label":'Permalink to "KMP 算法"'},"​")],-1),c=e("p",null,"在构建 next 数组时，理解 i 和 j 指针",-1),d=e("p",null,"j: 最长公共前缀的长度（最长公共前缀的后一位）。",-1),l=e("p",null,"i: 后缀的位置。",-1),r=e("p",null,[t("如果不相同，就要查找 "),e("code",null,"next[j - 1]"),t("，从最长相同前缀的后一个字母开始匹配。")],-1),i=e("p",null,"如果位置不相同，那么就要拿掉位置。理解 i 和 j 指针。",-1),p=[_,c,d,l,r,i];function h(m,u,f,x,P,j){return s(),a("div",null,p)}const B=o(n,[["render",h]]);export{$ as __pageData,B as default};
